// =============================================================================
// server/scripts/testCountryModel.js - Script de test
// =============================================================================
const mongoose = require('mongoose');
require('dotenv').config();

// Import du mod√®le Country
const Country = require('../models/Country');

const testCountryModel = async () => {
  try {
    // Connexion √† la DB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB pour les tests');

    // Nettoyer TOUTES les donn√©es pour les tests
    await Country.deleteMany({});
    console.log('üßπ Toutes les donn√©es supprim√©es pour les tests');

    // =============================================================================
    // TEST 1: Cr√©ation de pays valides
    // =============================================================================
    console.log('\nüìã TEST 1: Cr√©ation de pays valides');

    const validCountries = [
      {
        code: 'fr',              // Sera converti en 'FR' (uppercase)
        name: ' France ',        // Sera nettoy√© en 'France' (trim)
        flag: 'üá´üá∑',
        continent: 'Europe',
        capital: 'Paris',
        population: 67000000
      },
      {
        code: 'JP',
        name: 'Japan',
        flag: 'üáØüáµ',
        continent: 'Asia',
        capital: 'Tokyo',
        population: 125000000
      },
      {
        code: 'US',
        name: 'United States',
        flag: 'üá∫üá∏',
        continent: 'North America'
        // capital et population optionnels
      }
    ];

    for (const countryData of validCountries) {
      const country = new Country(countryData);
      const savedCountry = await country.save();
      console.log(`‚úÖ ${savedCountry.name} cr√©√© avec code: ${savedCountry.code}`);
      console.log(`   - Timestamps: cr√©√© le ${savedCountry.createdAt}`);
      console.log(`   - isActive par d√©faut: ${savedCountry.isActive}`);
    }

    // =============================================================================
    // TEST 2: Validation des donn√©es invalides
    // =============================================================================
    console.log('\n‚ùå TEST 2: Validation des donn√©es invalides');

    const invalidTests = [
      {
        name: 'Code trop court',
        data: { code: 'F', name: 'TEST_France', flag: 'üá´üá∑' }
      },
      {
        name: 'Code trop long', 
        data: { code: 'FRANCE', name: 'TEST_France', flag: 'üá´üá∑' }
      },
      {
        name: 'Nom manquant',
        data: { code: 'FR', flag: 'üá´üá∑' }
      },
      {
        name: 'Drapeau manquant',
        data: { code: 'FR', name: 'TEST_France' }
      },
      {
        name: 'Continent invalide',
        data: { code: 'FR', name: 'TEST_France', flag: 'üá´üá∑', continent: 'Mars' }
      },
      {
        name: 'Type incorrect (nom = objet)',
        data: { code: 'XX', name: { invalid: 'object' }, flag: 'üè≥Ô∏è' }  // Objet impossible √† convertir
      }
    ];

    for (const test of invalidTests) {
      try {
        const invalidCountry = new Country(test.data);
        await invalidCountry.save();
        console.log(`‚ö†Ô∏è  PROBL√àME: ${test.name} - devrait √™tre rejet√© !`);
      } catch (error) {
        console.log(`‚úÖ ${test.name} - correctement rejet√©:`);
        console.log(`   Erreur: ${error.message.split(',')[0]}`);
      }
    }

    // =============================================================================
    // TEST 3: Contrainte unique (codes pays en double)
    // =============================================================================
    console.log('\nüîí TEST 3: Contrainte unique');

    try {
      // Essayer de cr√©er un deuxi√®me pays avec le m√™me code
      const duplicateCountry = new Country({
        code: 'FR',              // Code d√©j√† utilis√© !
        name: 'TEST_France_Duplicate',
        flag: 'üá´üá∑'
      });
      await duplicateCountry.save();
      console.log('‚ö†Ô∏è  PROBL√àME: Code dupliqu√© accept√© !');
    } catch (error) {
      console.log('‚úÖ Code dupliqu√© correctement rejet√©:');
      console.log(`   Erreur: ${error.message}`);
    }

    // =============================================================================
    // TEST 4: Recherches avec index
    // =============================================================================
    console.log('\nüîç TEST 4: Recherches optimis√©es');

    // Recherche par code (index optimis√©)
    const startTime1 = Date.now();
    const france = await Country.findOne({ code: 'FR' });
    const endTime1 = Date.now();
    console.log(`‚úÖ Recherche par code: ${france.name} trouv√© en ${endTime1 - startTime1}ms`);

    // Recherche par nom (index optimis√©)
    const startTime2 = Date.now();
    const japan = await Country.findOne({ name: 'Japan' });
    const endTime2 = Date.now();
    console.log(`‚úÖ Recherche par nom: ${japan.name} trouv√© en ${endTime2 - startTime2}ms`);

    // Recherche pays actifs (index optimis√©)
    const startTime3 = Date.now();
    const activeCountries = await Country.find({ isActive: true });
    const endTime3 = Date.now();
    console.log(`‚úÖ Pays actifs: ${activeCountries.length} trouv√©s en ${endTime3 - startTime3}ms`);

    // Recherche par continent (pas d'index, plus lent)
    const startTime4 = Date.now();
    const europeanCountries = await Country.find({ continent: 'Europe' });
    const endTime4 = Date.now();
    console.log(`‚úÖ Pays europ√©ens: ${europeanCountries.length} trouv√©s en ${endTime4 - startTime4}ms`);

    // =============================================================================
    // TEST 5: Modification et timestamps
    // =============================================================================
    console.log('\nüìù TEST 5: Modification et timestamps');

    const country = await Country.findOne({ code: 'US' });
    console.log(`üìÖ Avant modification - updatedAt: ${country.updatedAt}`);

    // Attendre 1 seconde pour voir la diff√©rence
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Modifier le pays
    country.capital = 'Washington D.C.';
    country.population = 331000000;
    await country.save();

    const updatedCountry = await Country.findOne({ code: 'US' });
    console.log(`üìÖ Apr√®s modification - updatedAt: ${updatedCountry.updatedAt}`);
    console.log(`‚úÖ Timestamps mis √† jour automatiquement`);

    // =============================================================================
    // TEST 6: Requ√™tes complexes pour ton app Vizza
    // =============================================================================
    console.log('\nüéØ TEST 6: Requ√™tes pour l\'app Vizza');

    // Tous les pays actifs pour le dropdown origine/destination
    const availableCountries = await Country.find(
      { isActive: true },
      { code: 1, name: 1, flag: 1 }  // Seulement ces champs (optimisation)
    ).sort({ name: 1 });             // Tri√© par nom
    
    console.log('üìã Pays disponibles pour l\'app:');
    availableCountries.forEach(country => {
      console.log(`   ${country.flag} ${country.name} (${country.code})`);
    });

    // Recherche par code pour l'API
    const searchCode = 'FR';
    const countryForAPI = await Country.findOne({ code: searchCode });
    if (countryForAPI) {
      console.log(`\nüîç API recherche ${searchCode}:`);
      console.log(`   Nom: ${countryForAPI.name}`);
      console.log(`   Drapeau: ${countryForAPI.flag}`);
      console.log(`   Actif: ${countryForAPI.isActive}`);
    }

    // =============================================================================
    // STATISTIQUES FINALES
    // =============================================================================
    console.log('\nüìä STATISTIQUES FINALES:');
    
    const totalCountries = await Country.countDocuments();
    const activeCountries2 = await Country.countDocuments({ isActive: true });
    const europeanCount = await Country.countDocuments({ continent: 'Europe' });
    
    console.log(`   - Total pays: ${totalCountries}`);
    console.log(`   - Pays actifs: ${activeCountries2}`);
    console.log(`   - Pays europ√©ens: ${europeanCount}`);

    console.log('\nüéâ Tous les tests termin√©s avec succ√®s !');

  } catch (error) {
    console.error('üí• Erreur pendant les tests:', error);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
};

// Lancer les tests
testCountryModel();
